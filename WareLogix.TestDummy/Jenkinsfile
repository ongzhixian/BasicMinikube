// This pipeline demonstrates:
// 1.   using parameters
// 2.   compose a variable (ASSEMBLY_VERSION)
// 3.   conditional steps (if-else in script)
// 4.   parallel builds
// 5.

// Parameters:
// 1. VERSION_*         -- use to generate assembly version number
// 2. DEBUG_PIPELINE    -- use to conditionally print debug information (like environment variables)
// 3. PROJECT_NAME      -- use to centrally define a project


pipeline {

    agent any

    parameters {
        booleanParam(   name: "DEBUG_PIPELINE"    , defaultValue: true, description: "Prints additional information for debugging")
        string(         name: "VERSION_MAJOR"     , defaultValue: "0", trim: true, description: "The major component of version number")
        string(         name: "VERSION_MINOR"     , defaultValue: "0", trim: true, description: "The minor component of version number")
        string(         name: "VERSION_BUILD"     , defaultValue: "0", trim: true, description: "The build component of version number")
        string(         name: "PROJECT_NAME"      , defaultValue: "WareLogix.TestDummy", trim: true, description: "The build component of version number")
    }

    stages {
        
        stage('Clean') {
            steps {
                
                script {
                    // PRINT ENVIRONMENT VARIABLES ONLY IF WE ARE DEBUGGING THE PIPELINE
                    if (params.DEBUG_PIPELINE) {
                        bat 'set'
                        // Note: println is groovy, echo is step
                        println "ZDEBUG: ${env.JOB_NAME}"
                    }

                    // DEFINE ASSEMBLY_VERSION FROM PARAMETERS AND BUILD_NUMBER
                    ASSEMBLY_VERSION = "${params.VERSION_MAJOR}.${params.VERSION_MINOR}.${params.VERSION_BUILD}.${BUILD_NUMBER}"
                    echo "ASSEMBLY_VERSION is set to be: [${ASSEMBLY_VERSION}]"
                }

                dotnetClean(configuration: 'Release', nologo: true)
            }
        }

        stage('Restore') {
            steps {
                dotnetRestore(project: params.PROJECT_NAME)
            }
        }

        stage('Build') {
            parallel {
                stage('Build debug') {
                    steps {
                        //dotnetRestore(project: params.PROJECT_NAME)
                        dotnetBuild(project: params.PROJECT_NAME, configuration: 'Debug', noRestore: true, nologo: true, optionsString: "-p:AssemblyVersion=${ASSEMBLY_VERSION} -nowarn:DV2001")
                    }
                }
                stage('Build release') {
                    steps {
                        //dotnetRestore(project: 'WareLogix.TestDummy')
                        dotnetBuild(project: params.PROJECT_NAME, configuration: 'Release', noRestore: true, nologo: true, optionsString: "-p:AssemblyVersion=${ASSEMBLY_VERSION} -nowarn:DV2001")
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dotnetTest(configuration: 'Release', noBuild: true, noRestore: true, nologo: true)
                //bat 'dir'
            }
        }

        stage('Pack') {
            steps {
                dotnetPack(project: params.PROJECT_NAME, configuration: 'Release', noBuild: true, noRestore: true, nologo: true, optionsString: "-p:Version=${ASSEMBLY_VERSION}")
                //bat 'dir'
            }
        }

        //stage('Deployment check') {
        //    steps {
        //        input "Deploy to Minikube?"
        //    }
        //}

        stage('Deploy') {
            steps {
                // Deployment logic goes here (e.g., pushing to a cloud provider)
                
                echo 'Deploying application...'

                dotnetNuGetPush(root: "WareLogix.TestDummy/bin/Release/WareLogix.TestDummy.${ASSEMBLY_VERSION}.nupkg", source: 'http://localhost:8081/repository/nuget-hosted/', apiKeyId: 'localhost-nexus-nuget-admin-api-key')


//                 pwsh '''
// minikube status
// $nextContainerImageName = "redis-console-app:0.0.0.$env:BUILD_NUMBER"
// Write-Host $nextContainerImageName

// Push-Location
// Set-Location .\\WareLogix.TestDummy\\

// minikube image build . -t $nextContainerImageName -f .\\Dockerfile
// kubectl set image cronjob/test-job test-job=docker.io/library/$nextContainerImageName

// Pop-Location
// '''
                echo 'Deploying application done'
            }
        }
    }

    post {
        always {
            script {
                if (params.DEBUG_PIPELINE) { // PRINT ENVIRONMENT VARIABLES ONLY IF WE ARE DEBUGGING THE PIPELINE
                    bat 'set'
                    bat 'dir WareLogix.TestDummy /s'
                }
            }

            //archiveArtifacts artifacts:'WareLogix.TestDummy/bin/Release/net8.0/** , WareLogix.TestDummy/bin/Debug/net8.0/**'
            //archiveArtifacts artifacts:'WareLogix.TestDummy/bin/Release/net8.0/**'
            echo 'Pipeline completed.'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
