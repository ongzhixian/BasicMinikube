pipeline {

    agent any

    stages {
        stage('Clean') {
            steps {
                dotnetClean(configuration: 'Release', nologo: true)
                println "ZDEBUG: ${env.JOB_NAME}"
                bat 'set'
                
            }
        }

        stage('Restore') {
            steps {
                dotnetRestore()
            }
        }

        stage('Build') {
            parallel {
                stage('Build debug') {
                    steps {
                    dotnetRestore()
                        dotnetBuild(project: 'TestDummyConsoleApp', configuration: 'Debug', noRestore: true, nologo: true, optionsString: "-p:AssemblyVersion=0.0.0.${BUILD_NUMBER} -nowarn:DV2001")
                    }
                }
                stage('Build release') {
                    steps {
                    dotnetRestore()
                        dotnetBuild(project: 'TestDummyConsoleApp', configuration: 'Release', noRestore: true, nologo: true, optionsString: "-p:AssemblyVersion=0.0.0.${BUILD_NUMBER} -nowarn:DV2001")
                    }
                }
            }

        }

        stage('Test') {
            steps {
                dotnetTest(configuration: 'Release', noBuild: true, noRestore: true, nologo: true)
                //bat 'dir'
            }
        }

        //stage('Deployment check') {
        //    steps {
        //        input "Deploy to Minikube?"
        //    }
        //}

        stage('Deploy') {
            steps {
                // Deployment logic goes here (e.g., pushing to a cloud provider)
                
                echo 'Deploying application...'
//                 pwsh '''
// minikube status
// $nextContainerImageName = "redis-console-app:0.0.0.$env:BUILD_NUMBER"
// Write-Host $nextContainerImageName

// Push-Location
// Set-Location .\\TestDummyConsoleApp\\

// minikube image build . -t $nextContainerImageName -f .\\Dockerfile
// kubectl set image cronjob/test-job test-job=docker.io/library/$nextContainerImageName

// Pop-Location
// '''
                echo 'Deploying application done'
            }
        }
    }

    post {
        always {
            bat 'dir TestDummyConsoleApp /s'
            // You can only have one (and only one artifact)
            //archiveArtifacts artifacts:'TestDummyConsoleApp/bin/Release/net8.0/** , TestDummyConsoleApp/bin/Debug/net8.0/**'
            echo 'Pipeline completed.'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
