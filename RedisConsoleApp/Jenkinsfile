pipeline {

    agent any

    stages {
        stage('Clean') {
            steps {
                dotnetClean(configuration: 'Release', nologo: true)
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'TODO: Still figuring this out'
            }
        }

        stage('Build') {
            steps {
                dotnetRestore()
                dotnet sonarscanner begin /k:"RedisConsoleApp" /d:sonar.host.url="http://127.0.0.1:9000"  /d:sonar.token="sqp_0f212a9cbad26a73b8743e04a17f8c93d1b47509"
                dotnetBuild(project: 'RedisConsoleApp', configuration: 'Release', noRestore: true, nologo: true, optionsString: "-p:AssemblyVersion=0.0.0.${BUILD_NUMBER} -nowarn:DV2001")
                dotnet sonarscanner end /d:sonar.token="sqp_0f212a9cbad26a73b8743e04a17f8c93d1b47509"
            }
        }

        stage('Test') {
            steps {
                dotnetTest(configuration: 'Release', noBuild: true, noRestore: true, nologo: true)
            }
        }

        stage('Deploy') {
            steps {
                // Deployment logic goes here (e.g., pushing to a cloud provider)
                echo 'Deploying application...'
                pwsh '''
minikube status
$nextContainerImageName = "redis-console-app:0.0.0.$env:BUILD_NUMBER"
Write-Host $nextContainerImageName

Push-Location
Set-Location .\\SimpleJobConsoleApp\\

minikube image build . -t $nextContainerImageName -f .\\Dockerfile
kubectl set image cronjob/test-job test-job=docker.io/library/$nextContainerImageName

Pop-Location
'''
                echo 'Deploying application done'
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
