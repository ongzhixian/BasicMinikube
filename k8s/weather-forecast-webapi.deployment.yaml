apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: weather-forecast-webapi
  name: weather-forecast-webapi
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: weather-forecast-webapi
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: weather-forecast-webapi
    spec:
      automountServiceAccountToken: false
      revisionHistoryLimit: 1
      volumes:
        - name: config-volume
          configMap:
            name: weather-forecast-webapi-config
        - name: secret-volume
          secret:
            secretName: weather-forecast-webapi-secret
        - name: weather-forecast-webapi-volume
          persistentVolumeClaim:
            claimName: weather-forecast-webapi-pvc
      containers:
      - image: docker.io/library/weather-forecast-webapi:v1
        imagePullPolicy: IfNotPresent
        name: weather-forecast-webapi
        volumeMounts:
        - name: config-volume
          mountPath: /opt/app/etc
        - name: config-volume
          mountPath: /opt/app/appsettings.json
          subPath: appsettings.json
        - name: secret-volume
          mountPath: /opt/app/sec
        - name: secret-volume
          mountPath: /opt/app/sec2/.secret-file
          subPath: .secret-file
        - name: secret-volume
          mountPath: /opt/app/.appsettings.secrets.json
          subPath: .appsettings.secrets.json
        - mountPath: /opt/app/data
          name: weather-forecast-webapi-volume
        resources:
          requests:
            memory: "100Mi"
          limits:
            memory: "200Mi"
            ephemeral-storage: "500Mi"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        livenessProbe:
          httpGet:
            path: /liveness
            port: 80
            httpHeaders:
            - name: Custom-Header
              value: Awesome
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
            httpHeaders:
            - name: Custom-Header
              value: Awesome
          initialDelaySeconds: 3
          periodSeconds: 3
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
